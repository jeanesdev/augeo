{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.38.33.27573",
      "templateHash": "1198618763738427375"
    }
  },
  "parameters": {
    "appInsightsName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Application Insights instance"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Azure region"
      }
    },
    "environment": {
      "type": "string",
      "allowedValues": [
        "dev",
        "staging",
        "production"
      ],
      "metadata": {
        "description": "Environment (dev, staging, production)"
      }
    },
    "workspaceId": {
      "type": "string",
      "metadata": {
        "description": "Log Analytics Workspace ID"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Tags for the resource"
      }
    },
    "backendApiUrl": {
      "type": "string",
      "metadata": {
        "description": "Backend API URL for availability tests"
      }
    },
    "frontendUrl": {
      "type": "string",
      "metadata": {
        "description": "Frontend URL for availability tests"
      }
    },
    "alertEmailAddresses": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Alert notification email addresses"
      }
    },
    "enableAvailabilityTests": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable availability tests (should be false for localhost URLs)"
      }
    }
  },
  "variables": {
    "samplingPercentage": "[if(equals(parameters('environment'), 'production'), 10, 100)]",
    "dailyCapGB": "[if(equals(parameters('environment'), 'dev'), 0, if(equals(parameters('environment'), 'staging'), 1, 5))]",
    "testLocations": [
      {
        "Id": "us-va-ash-azr"
      },
      {
        "Id": "us-ca-sjc-azr"
      },
      {
        "Id": "emea-nl-ams-azr"
      }
    ]
  },
  "resources": [
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[parameters('appInsightsName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[parameters('workspaceId')]",
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled",
        "SamplingPercentage": "[variables('samplingPercentage')]",
        "IngestionMode": "LogAnalytics",
        "DisableIpMasking": false,
        "Request_Source": "rest"
      }
    },
    {
      "condition": "[greater(variables('dailyCapGB'), 0)]",
      "type": "microsoft.insights/components/pricingPlans",
      "apiVersion": "2017-10-01",
      "name": "[format('{0}/{1}', parameters('appInsightsName'), 'current')]",
      "properties": {
        "cap": "[variables('dailyCapGB')]",
        "stopSendNotificationWhenHitCap": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]"
      ]
    },
    {
      "condition": "[greater(length(parameters('alertEmailAddresses')), 0)]",
      "type": "Microsoft.Insights/actionGroups",
      "apiVersion": "2023-01-01",
      "name": "[format('{0}-alerts', parameters('appInsightsName'))]",
      "location": "Global",
      "tags": "[parameters('tags')]",
      "properties": {
        "copy": [
          {
            "name": "emailReceivers",
            "count": "[length(parameters('alertEmailAddresses'))]",
            "input": {
              "name": "[format('Email{0}', copyIndex('emailReceivers'))]",
              "emailAddress": "[parameters('alertEmailAddresses')[copyIndex('emailReceivers')]]",
              "useCommonAlertSchema": true
            }
          }
        ],
        "groupShortName": "[substring(format('{0}-alert', parameters('environment')), 0, 12)]",
        "enabled": true
      }
    },
    {
      "condition": "[parameters('enableAvailabilityTests')]",
      "type": "Microsoft.Insights/webtests",
      "apiVersion": "2022-06-15",
      "name": "[format('{0}-backend-health', parameters('appInsightsName'))]",
      "location": "[parameters('location')]",
      "tags": "[union(parameters('tags'), createObject(format('hidden-link:{0}', resourceId('Microsoft.Insights/components', parameters('appInsightsName'))), 'Resource'))]",
      "properties": {
        "SyntheticMonitorId": "[format('{0}-backend-health', parameters('appInsightsName'))]",
        "Name": "Backend Health Check",
        "Enabled": true,
        "Frequency": 300,
        "Timeout": 30,
        "Kind": "ping",
        "Locations": "[variables('testLocations')]",
        "Configuration": {
          "WebTest": "[format('<WebTest Name=\"Backend Health\" Id=\"{0}\" Enabled=\"True\" Timeout=\"30\" xmlns=\"http://microsoft.com/schemas/VisualStudio/TeamTest/2010\"><Items><Request Method=\"GET\" Guid=\"{1}\" Version=\"1.1\" Url=\"{2}/health\" ThinkTime=\"0\" Timeout=\"30\" ParseDependentRequests=\"False\" FollowRedirects=\"True\" RecordResult=\"True\" Cache=\"False\" ResponseTimeGoal=\"0\" Encoding=\"utf-8\" ExpectedHttpStatusCode=\"200\" ExpectedResponseUrl=\"\" ReportingName=\"\" IgnoreHttpStatusCode=\"False\" /></Items></WebTest>', guid(parameters('appInsightsName'), 'backend'), guid(parameters('backendApiUrl')), parameters('backendApiUrl'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]"
      ]
    },
    {
      "condition": "[parameters('enableAvailabilityTests')]",
      "type": "Microsoft.Insights/webtests",
      "apiVersion": "2022-06-15",
      "name": "[format('{0}-frontend-home', parameters('appInsightsName'))]",
      "location": "[parameters('location')]",
      "tags": "[union(parameters('tags'), createObject(format('hidden-link:{0}', resourceId('Microsoft.Insights/components', parameters('appInsightsName'))), 'Resource'))]",
      "properties": {
        "SyntheticMonitorId": "[format('{0}-frontend-home', parameters('appInsightsName'))]",
        "Name": "Frontend Homepage Check",
        "Enabled": true,
        "Frequency": 300,
        "Timeout": 30,
        "Kind": "ping",
        "Locations": "[variables('testLocations')]",
        "Configuration": {
          "WebTest": "[format('<WebTest Name=\"Frontend Homepage\" Id=\"{0}\" Enabled=\"True\" Timeout=\"30\" xmlns=\"http://microsoft.com/schemas/VisualStudio/TeamTest/2010\"><Items><Request Method=\"GET\" Guid=\"{1}\" Version=\"1.1\" Url=\"{2}\" ThinkTime=\"0\" Timeout=\"30\" ParseDependentRequests=\"False\" FollowRedirects=\"True\" RecordResult=\"True\" Cache=\"False\" ResponseTimeGoal=\"0\" Encoding=\"utf-8\" ExpectedHttpStatusCode=\"200\" ExpectedResponseUrl=\"\" ReportingName=\"\" IgnoreHttpStatusCode=\"False\" /></Items></WebTest>', guid(parameters('appInsightsName'), 'frontend'), guid(parameters('frontendUrl')), parameters('frontendUrl'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]"
      ]
    },
    {
      "condition": "[and(parameters('enableAvailabilityTests'), greater(length(parameters('alertEmailAddresses')), 0))]",
      "type": "Microsoft.Insights/metricAlerts",
      "apiVersion": "2018-03-01",
      "name": "[format('{0}-backend-availability', parameters('appInsightsName'))]",
      "location": "Global",
      "tags": "[parameters('tags')]",
      "properties": {
        "description": "Backend health endpoint is failing",
        "severity": 1,
        "enabled": true,
        "scopes": [
          "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]",
          "[resourceId('Microsoft.Insights/webtests', format('{0}-backend-health', parameters('appInsightsName')))]"
        ],
        "evaluationFrequency": "PT1M",
        "windowSize": "PT5M",
        "criteria": {
          "odata.type": "Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria",
          "webTestId": "[resourceId('Microsoft.Insights/webtests', format('{0}-backend-health', parameters('appInsightsName')))]",
          "componentId": "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]",
          "failedLocationCount": 2
        },
        "actions": [
          {
            "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', format('{0}-alerts', parameters('appInsightsName')))]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/actionGroups', format('{0}-alerts', parameters('appInsightsName')))]",
        "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]",
        "[resourceId('Microsoft.Insights/webtests', format('{0}-backend-health', parameters('appInsightsName')))]"
      ]
    },
    {
      "condition": "[greater(length(parameters('alertEmailAddresses')), 0)]",
      "type": "Microsoft.Insights/metricAlerts",
      "apiVersion": "2018-03-01",
      "name": "[format('{0}-frontend-availability', parameters('appInsightsName'))]",
      "location": "Global",
      "tags": "[parameters('tags')]",
      "properties": {
        "description": "Frontend homepage is failing",
        "severity": 1,
        "enabled": true,
        "scopes": [
          "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]",
          "[resourceId('Microsoft.Insights/webtests', format('{0}-frontend-home', parameters('appInsightsName')))]"
        ],
        "evaluationFrequency": "PT1M",
        "windowSize": "PT5M",
        "criteria": {
          "odata.type": "Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria",
          "webTestId": "[resourceId('Microsoft.Insights/webtests', format('{0}-frontend-home', parameters('appInsightsName')))]",
          "componentId": "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]",
          "failedLocationCount": 2
        },
        "actions": [
          {
            "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', format('{0}-alerts', parameters('appInsightsName')))]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/actionGroups', format('{0}-alerts', parameters('appInsightsName')))]",
        "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]",
        "[resourceId('Microsoft.Insights/webtests', format('{0}-frontend-home', parameters('appInsightsName')))]"
      ]
    },
    {
      "condition": "[greater(length(parameters('alertEmailAddresses')), 0)]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "apiVersion": "2023-03-15-preview",
      "name": "[format('{0}-high-error-rate', parameters('appInsightsName'))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "description": "Error rate exceeded 5% for 5 minutes",
        "severity": 1,
        "enabled": true,
        "evaluationFrequency": "PT1M",
        "windowSize": "PT5M",
        "scopes": [
          "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]"
        ],
        "criteria": {
          "allOf": [
            {
              "query": "requests | where success == false | summarize errorCount = count() by bin(timestamp, 1m) | extend totalRequests = toscalar(requests | summarize count() by bin(timestamp, 1m) | summarize sum(count_)) | extend errorRate = (errorCount * 100.0) / totalRequests | where errorRate > 5",
              "timeAggregation": "Count",
              "operator": "GreaterThan",
              "threshold": 0,
              "failingPeriods": {
                "numberOfEvaluationPeriods": 5,
                "minFailingPeriodsToAlert": 5
              }
            }
          ]
        },
        "actions": {
          "actionGroups": [
            "[resourceId('Microsoft.Insights/actionGroups', format('{0}-alerts', parameters('appInsightsName')))]"
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/actionGroups', format('{0}-alerts', parameters('appInsightsName')))]",
        "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]"
      ]
    },
    {
      "condition": "[greater(length(parameters('alertEmailAddresses')), 0)]",
      "type": "Microsoft.Insights/scheduledQueryRules",
      "apiVersion": "2023-03-15-preview",
      "name": "[format('{0}-high-latency', parameters('appInsightsName'))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "description": "P95 latency exceeded 500ms for 5 minutes",
        "severity": 1,
        "enabled": true,
        "evaluationFrequency": "PT1M",
        "windowSize": "PT5M",
        "scopes": [
          "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]"
        ],
        "criteria": {
          "allOf": [
            {
              "query": "requests | summarize p95 = percentile(duration, 95) by bin(timestamp, 1m) | where p95 > 500",
              "timeAggregation": "Count",
              "operator": "GreaterThan",
              "threshold": 0,
              "failingPeriods": {
                "numberOfEvaluationPeriods": 5,
                "minFailingPeriodsToAlert": 5
              }
            }
          ]
        },
        "actions": {
          "actionGroups": [
            "[resourceId('Microsoft.Insights/actionGroups', format('{0}-alerts', parameters('appInsightsName')))]"
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/actionGroups', format('{0}-alerts', parameters('appInsightsName')))]",
        "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]"
      ]
    }
  ],
  "outputs": {
    "appInsightsId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]"
    },
    "appInsightsName": {
      "type": "string",
      "value": "[parameters('appInsightsName')]"
    },
    "appInsightsInstrumentationKey": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').InstrumentationKey]"
    },
    "appInsightsConnectionString": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').ConnectionString]"
    },
    "actionGroupId": {
      "type": "string",
      "value": "[if(greater(length(parameters('alertEmailAddresses')), 0), resourceId('Microsoft.Insights/actionGroups', format('{0}-alerts', parameters('appInsightsName'))), '')]"
    },
    "backendAvailabilityTestId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Insights/webtests', format('{0}-backend-health', parameters('appInsightsName')))]"
    },
    "frontendAvailabilityTestId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Insights/webtests', format('{0}-frontend-home', parameters('appInsightsName')))]"
    }
  }
}
