[tool.poetry]
name = "augeo-backend"
version = "0.1.0"
description = "Augeo Platform - Backend API"
authors = ["Augeo Team <dev@augeo.app>"]
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.120.0"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
sqlalchemy = "^2.0.0"
pydantic = {extras = ["email"], version = "^2.0.0"}
pydantic-settings = "^2.0.0"
pyjwt = {extras = ["crypto"], version = "^2.9.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
alembic = "^1.12.0"
redis = "^5.0.0"
asyncpg = "^0.29.0"
python-multipart = "^0.0.20"
httpx = "^0.25.0"
azure-communication-email = "^1.0.0"
python-dotenv = "^1.0.0"
prometheus-client = "^0.16.0"
anyio = "^4.4.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
factory-boy = "^3.3.0"
faker = "^19.0.0"
ruff = "^0.8.0"
black = "^23.0.0"
mypy = "^1.6.0"
pre-commit = "^3.5.0"
httpx = "^0.25.0"
types-redis = "^4.6.0.20241004"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "B904",  # raise without from in exception handler (FastAPI pattern)
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "app.tests.conftest"
disallow_untyped_defs = false
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = "alembic.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "pydantic_settings"
ignore_missing_imports = false

[[tool.mypy.overrides]]
module = "redis.*"
ignore_missing_imports = false

[tool.pytest.ini_options]
testpaths = ["app/tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = """
    -v
    --strict-markers
    --tb=short
    --cov=app
    --cov-report=term-missing
    --cov-report=html
    --cov-report=xml
    --asyncio-mode=auto
"""
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
